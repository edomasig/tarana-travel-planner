'use client'

import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import { MapPin, Clock, DollarSign, Download, Save, Share2, Camera, Utensils, Bed } from 'lucide-react'
import { AdBanner } from '@/components/ads/ad-banner'
import ReactMarkdown from 'react-markdown'
import remarkGfm from 'remark-gfm'
import { useToast } from '@/hooks/use-toast'

interface ItineraryProps {
  itinerary: {
    title: string
    content?: string
    duration?: string
    totalBudget?: string
    days?: Array<{
      day: number
      location: string
      activities: Array<{
        time: string
        activity: string
        description: string
        cost: string
        type: 'attraction' | 'food' | 'accommodation' | 'transport'
      }>
    }>
    tips?: string[]
    transportation?: string
    bestTime?: string
    generated_by?: string
    timestamp?: string
  }
}

// Collapse excessive blank lines similar to chat tightening
const tightenMarkdown = (md: string) => md
  .replace(/\n{3,}/g, '\n\n')
  .replace(/\n\s+\n/g, '\n\n')
  .trim()

export function ItineraryDisplay({ itinerary }: ItineraryProps) {
  const { toast } = useToast()
  
  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text)
    toast({
      title: "Copied!",
      description: "Itinerary copied to clipboard!",
    })
  }

  const shareItinerary = (text: string) => {
    if (navigator.share) {
      navigator.share({ title: itinerary.title, text })
    } else {
      copyToClipboard(text)
    }
  }

  // If it's a simple text response, show it as formatted text
  if (itinerary.content && !itinerary.days) {
    const cleaned = tightenMarkdown(itinerary.content)
    return (
      <div className="space-y-5">
        <Card>
          <CardHeader className="pb-4">
            <div className="flex items-start justify-between gap-4">
              <div className="min-w-0">
                <CardTitle className="text-xl md:text-2xl text-gray-900 tracking-tight leading-snug">{itinerary.title}</CardTitle>
                {itinerary.generated_by && (
                  <p className="text-xs md:text-sm text-gray-600 mt-1">Generated by {itinerary.generated_by}</p>
                )}
              </div>
              <div className="flex gap-1.5 flex-shrink-0">
                <Button variant="outline" size="sm" onClick={() => copyToClipboard(cleaned)} className="h-8 text-xs px-2">
                  <Save className="h-3.5 w-3.5 mr-1" />Save
                </Button>
                <Button variant="outline" size="sm" onClick={() => shareItinerary(cleaned)} className="h-8 text-xs px-2">
                  <Share2 className="h-3.5 w-3.5 mr-1" />Share
                </Button>
              </div>
            </div>
          </CardHeader>
          <CardContent className="pt-0 pb-5">
            <div className="prose prose-tight prose-sm md:prose-base max-w-none tracking-tight prose-headings:mt-3 prose-headings:mb-1 prose-p:my-1 prose-li:my-[2px] prose-ul:my-1 prose-ol:my-1 prose-p:text-gray-700 prose-li:marker:text-blue-600 prose-strong:text-gray-900 prose-code:text-purple-600 whitespace-pre-wrap">
              <ReactMarkdown remarkPlugins={[remarkGfm]}>{cleaned}</ReactMarkdown>
            </div>
          </CardContent>
        </Card>
        <AdBanner position="between-messages" />
      </div>
    )
  }

  // For structured itineraries (legacy format)
  const getActivityIcon = (type: string) => {
    switch (type) {
      case 'food': return Utensils
      case 'accommodation': return Bed
      case 'transport': return MapPin
      default: return Camera
    }
  }

  const getActivityColor = (type: string) => {
    switch (type) {
      case 'food': return 'text-orange-600 bg-orange-100'
      case 'accommodation': return 'text-purple-600 bg-purple-100'
      case 'transport': return 'text-blue-600 bg-blue-100'
      default: return 'text-green-600 bg-green-100'
    }
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <Card>
        <CardHeader>
          <div className="flex items-start justify-between">
            <div>
              <CardTitle className="text-2xl text-gray-900">{itinerary.title}</CardTitle>
              <div className="flex items-center gap-4 mt-2 text-gray-600">
                <div className="flex items-center gap-1">
                  <Clock className="h-4 w-4" />
                  {itinerary.duration}
                </div>
                <div className="flex items-center gap-1">
                  <DollarSign className="h-4 w-4" />
                  {itinerary.totalBudget}
                </div>
              </div>
            </div>
            <div className="flex gap-2">
              <Button variant="outline" size="sm">
                <Save className="h-4 w-4 mr-1" />
                Save
              </Button>
              <Button variant="outline" size="sm">
                <Share2 className="h-4 w-4 mr-1" />
                Share
              </Button>
              <Button variant="outline" size="sm">
                <Download className="h-4 w-4 mr-1" />
                PDF
              </Button>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <h4 className="font-semibold text-gray-900 mb-1">Transportation</h4>
              <p className="text-sm text-gray-600">{itinerary.transportation || 'Not specified'}</p>
            </div>
            <div>
              <h4 className="font-semibold text-gray-900 mb-1">Best Time to Visit</h4>
              <p className="text-sm text-gray-600">{itinerary.bestTime || 'Year-round'}</p>
            </div>
            <div>
              <h4 className="font-semibold text-gray-900 mb-1">Total Budget</h4>
              <p className="text-sm text-gray-600">{itinerary.totalBudget || 'Contact for pricing'}</p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Daily Itinerary */}
      {itinerary.days && itinerary.days.map((day) => (
        <Card key={day.day}>
          <CardHeader className="pb-3">
            <CardTitle className="flex items-center gap-2 text-lg md:text-xl tracking-tight">
              <div className="w-8 h-8 bg-blue-600 text-white rounded-full flex items-center justify-center text-sm font-bold">
                {day.day}
              </div>
              Day {day.day} - {day.location}
            </CardTitle>
          </CardHeader>
          <CardContent className="pt-0 pb-5">
            <div className="space-y-3">
              {day.activities.map((activity, index) => {
                const Icon = getActivityIcon(activity.type)
                const colorClass = getActivityColor(activity.type)
                
                return (
                  <div key={index} className="flex gap-4">
                    <div className="flex-shrink-0">
                      <div className={`w-10 h-10 rounded-lg ${colorClass} flex items-center justify-center`}>
                        <Icon className="h-5 w-5" />
                      </div>
                    </div>
                    <div className="flex-1">
                      <div className="flex items-start justify-between mb-1">
                        <h4 className="font-semibold text-gray-900">{activity.activity}</h4>
                        <div className="flex items-center gap-2">
                          <Badge variant="outline" className="text-xs">
                            {activity.time}
                          </Badge>
                          <Badge variant="outline" className="text-xs">
                            {activity.cost}
                          </Badge>
                        </div>
                      </div>
                      <p className="text-gray-600 text-sm leading-snug tracking-tight">{activity.description}</p>
                    </div>
                  </div>
                )
              })}
            </div>
          </CardContent>
        </Card>
      ))}

      {/* Travel Tips */}
      {itinerary.tips && itinerary.tips.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle>Travel Tips & Recommendations</CardTitle>
          </CardHeader>
          <CardContent>
            <ul className="space-y-2">
              {itinerary.tips.map((tip, index) => (
              <li key={index} className="flex items-start gap-2">
                <div className="w-1.5 h-1.5 bg-blue-600 rounded-full mt-2 flex-shrink-0" />
                <span className="text-gray-700 text-sm">{tip}</span>
              </li>
            ))}
          </ul>
        </CardContent>
      </Card>
      )}
    </div>
  )
}
