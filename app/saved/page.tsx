'use client'

import { useState, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { MessageSquare, Calendar, Trash2, Eye, Download, ArrowLeft } from 'lucide-react'
import Link from 'next/link'
import { AdBanner } from '@/components/ads/ad-banner'
import { loadConversationsFromCookies, deleteConversationFromCookies } from '@/lib/cookie-utils'

interface SavedConversation {
  id: string
  title: string
  preview: string
  messageCount: number
  createdAt: string
  lastMessage: string
  messages?: any[]
}

export default function SavedPage() {
  const [savedConversations, setSavedConversations] = useState<SavedConversation[]>([])
  const [debugInfo, setDebugInfo] = useState('')

  useEffect(() => {
    // Load saved conversations from cookies
    try {
      const conversations = loadConversationsFromCookies()
      if (conversations.length === 0 && typeof window !== 'undefined') {
        // Fallback to localStorage if any older saves exist
        const ls = localStorage.getItem('savedConversations')
        if (ls) {
          const parsed = JSON.parse(ls)
          setSavedConversations(parsed)
          setDebugInfo(`Loaded ${parsed.length} conversations from localStorage (fallback)`)        
          return
        }
      }
      setSavedConversations(conversations)
      setDebugInfo(`Loaded ${conversations.length} conversations from cookies`)
    } catch (error) {
      console.error('Error loading saved conversations:', error)
      setDebugInfo(`Error: ${error}`)
    }
  }, [])

  const refresh = () => {
    const conversations = loadConversationsFromCookies()
    setSavedConversations(conversations)
    setDebugInfo(`Refreshed: ${conversations.length} conversations from cookies`)
  }

  const handleDelete = (id: string) => {
    setSavedConversations(prev => prev.filter(item => item.id !== id))
    // Delete from cookies
    const success = deleteConversationFromCookies(id)
    if (!success) {
      console.error('Error deleting conversation from cookies')
      // Reload from cookies to sync state
      const conversations = loadConversationsFromCookies()
      setSavedConversations(conversations)
    }
  }

  const handleExport = (conversation: SavedConversation) => {
    let exportText = `GalaGPT.ph Travel Conversation\nTitle: ${conversation.title}\nDate: ${new Date(conversation.createdAt).toLocaleDateString()}\n\n`
    
    if (conversation.messages) {
      exportText += conversation.messages.map(msg => 
        `${msg.type === 'user' ? 'You' : 'GalaGPT'}: ${msg.content}`
      ).join('\n\n')
    } else {
      exportText += conversation.preview
    }
    
    exportText += '\n\nGenerated by GalaGPT.ph - Your AI Travel Assistant for the Philippines'
    
    navigator.clipboard.writeText(exportText)
    alert('Conversation exported to clipboard!')
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b px-4 py-4">
        <div className="max-w-4xl mx-auto flex items-center gap-4">
          <Button variant="ghost" size="sm" asChild>
            <Link href="/">
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back to Chat
            </Link>
          </Button>
          <div>
            <h1 className="text-2xl font-bold text-gray-900">Saved Conversations</h1>
            <p className="text-gray-600">Your travel planning history</p>
            {debugInfo && (
              <p className="text-xs text-blue-600 mt-1">Debug: {debugInfo}</p>
            )}
          </div>
          <Button variant="outline" size="sm" onClick={refresh}>
            Refresh
          </Button>
        </div>
      </div>

      <div className="max-w-4xl mx-auto p-4">
        {/* Top Banner Ad */}
        <AdBanner position="top" className="mb-6" />
        
        {savedConversations.length === 0 ? (
          <Card>
            <CardContent className="p-8 text-center">
              <MessageSquare className="h-12 w-12 mx-auto mb-4 text-gray-400" />
              <h3 className="text-lg font-semibold text-gray-900 mb-2">No Saved Conversations</h3>
              <p className="text-gray-600 mb-4">Start chatting about your Philippine travel plans to save conversations here.</p>
              <Button asChild>
                <Link href="/">Start New Conversation</Link>
              </Button>
            </CardContent>
          </Card>
        ) : (
          <div className="space-y-4">
            {savedConversations.map((conversation) => (
              <Card key={conversation.id} className="hover:shadow-md transition-shadow">
                <CardHeader className="pb-3">
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <CardTitle className="text-lg">{conversation.title}</CardTitle>
                      <div className="flex items-center gap-4 mt-2 text-sm text-gray-600">
                        <div className="flex items-center gap-1">
                          <MessageSquare className="h-4 w-4" />
                          {conversation.messageCount} messages
                        </div>
                        <div className="flex items-center gap-1">
                          <Calendar className="h-4 w-4" />
                          {new Date(conversation.createdAt).toLocaleDateString()}
                        </div>
                      </div>
                    </div>
                    <Badge variant="outline">
                      Saved
                    </Badge>
                  </div>
                </CardHeader>
                <CardContent className="pt-0">
                  <p className="text-gray-600 mb-3">{conversation.preview}</p>
                  <div className="bg-gray-50 p-3 rounded-lg mb-4">
                    <p className="text-sm text-gray-700 italic">
                      Last message: "{conversation.lastMessage}"
                    </p>
                  </div>
                  <div className="flex gap-2">
                    <Button variant="outline" size="sm" asChild>
                      <Link href={`/?convId=${encodeURIComponent(conversation.id)}`}>
                        <Eye className="h-4 w-4 mr-1" />
                        Continue Chat
                      </Link>
                    </Button>
                    <Button variant="outline" size="sm" onClick={() => handleExport(conversation)}>
                      <Download className="h-4 w-4 mr-1" />
                      Export
                    </Button>
                    <Button 
                      variant="outline" 
                      size="sm" 
                      onClick={() => handleDelete(conversation.id)}
                      className="text-red-600 hover:text-red-700 hover:bg-red-50"
                    >
                      <Trash2 className="h-4 w-4 mr-1" />
                      Delete
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        )}
        
        {/* Bottom Banner Ad */}
        <AdBanner position="bottom" className="mt-8" />
      </div>
    </div>
  )
}
