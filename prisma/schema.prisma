generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BlogPost {
  id              String     @id @default(cuid())
  title           String
  slug            String     @unique
  content         String
  excerpt         String?
  featuredImage   String?
  metaTitle       String?
  metaDescription String?
  status          PostStatus @default(DRAFT)
  published       Boolean    @default(false)
  publishedAt     DateTime?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  author          String?
  featured        Boolean    @default(false)
  facebookPostId  String?
  facebookPostUrl String?
  tags            Tag[]      @relation("BlogPostTags")

  @@map("blog_posts")
}

model TravelGuide {
  id              String     @id @default(cuid())
  title           String
  slug            String     @unique
  destination     String
  content         String
  excerpt         String?
  featuredImage   String?
  images          String[]
  bestTimeToVisit String?
  budgetRange     String?
  duration        String?
  difficulty      String?
  metaTitle       String?
  metaDescription String?
  status          PostStatus @default(DRAFT)
  published       Boolean    @default(false)
  publishedAt     DateTime?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  tags            Tag[]      @relation("TravelGuideTags")

  @@map("travel_guides")
}

model Tag {
  id           String        @id @default(cuid())
  name         String        @unique
  slug         String        @unique
  color        String?
  createdAt    DateTime      @default(now())
  blogPosts    BlogPost[]    @relation("BlogPostTags")
  travelGuides TravelGuide[] @relation("TravelGuideTags")

  @@map("tags")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      UserRole @default(EDITOR)
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model SeasonalContent {
  id              String                @id @default(cuid())
  season          String                @unique
  title           String
  description     String
  months          String
  temperature     String
  weather         String
  bestFor         String
  events          String
  metaTitle       String?
  metaDescription String?
  status          PostStatus            @default(DRAFT)
  published       Boolean               @default(false)
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  featuredImage   String?
  destinations    SeasonalDestination[]
  itinerary       SeasonalItinerary?
  tips            SeasonalTips?

  @@map("seasonal_content")
}

model SeasonalDestination {
  id          String          @id @default(cuid())
  seasonId    String
  name        String
  location    String
  description String
  image       String?
  rating      String?
  bestTime    String?
  budget      String?
  highlights  String[]
  prompt      String?
  order       Int             @default(0)
  season      SeasonalContent @relation(fields: [seasonId], references: [id], onDelete: Cascade)

  @@map("seasonal_destinations")
}

model SeasonalItinerary {
  id         String                 @id @default(cuid())
  seasonId   String                 @unique
  title      String
  duration   String
  budget     String
  difficulty String
  prompt     String?
  season     SeasonalContent        @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  days       SeasonalItineraryDay[]

  @@map("seasonal_itineraries")
}

model SeasonalItineraryDay {
  id          String             @id @default(cuid())
  itineraryId String
  day         Int
  location    String
  image       String?
  activities  SeasonalActivity[]
  itinerary   SeasonalItinerary  @relation(fields: [itineraryId], references: [id], onDelete: Cascade)

  @@map("seasonal_itinerary_days")
}

model SeasonalActivity {
  id          String               @id @default(cuid())
  dayId       String
  time        String
  activity    String
  description String
  cost        String?
  type        String
  tips        String?
  order       Int                  @default(0)
  day         SeasonalItineraryDay @relation(fields: [dayId], references: [id], onDelete: Cascade)

  @@map("seasonal_activities")
}

model SeasonalTips {
  id       String          @id @default(cuid())
  seasonId String          @unique
  packing  String[]
  advice   String[]
  season   SeasonalContent @relation(fields: [seasonId], references: [id], onDelete: Cascade)

  @@map("seasonal_tips")
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum UserRole {
  ADMIN
  EDITOR
}
